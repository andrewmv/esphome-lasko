esphome:
  name: lasko
  platform: ESP8266
  board: nodemcuv2

wifi:
  ssid: 
  password: 

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Lasko Fallback Hotspot"
    password: 

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: 

ota:
  password: 

# Implementation

globals:
  - id: actual_power
    type: bool
    restore_value: true
    initial_value: 'false'
  - id: actual_speed
    type: int
    restore_value: true
    initial_value: '1'
  - id: actual_oscillation
    type: bool
    restore_value: true
    initial_value: 'false'

sensor:
  - platform: dht
    pin: D5
    temperature:
      name: "Bedroom Temperature"
    humidity:
      name: "Bedroom Humidity"
    update_interval: 60s

remote_receiver:
  pin: 
    number: D7
    inverted: true
  dump: all

binary_sensor:
  - platform: remote_receiver
    id: speed_button
    name: "Speed Button"
    internal: true
    raw:
      code: [1297, -374, 1271, -399, 485, -1171, 1270, -400, 1270, -399, 459, -1197, 459, -1197, 459, -1197, 458, -1198, 459, -1198, 1268, -401, 458, -7918, 1244, -426, 1243, -426, 433, -1224, 1268, -402, 1268, -401, 460, -1196, 458, -1198, 458, -1198, 459, -1197, 459, -1198, 1269, -399, 459, -7918, 1269, -400, 1270, -399, 461, -1196, 1270, -399, 1271, -398, 459, -1198, 459, -1196, 460, -1197, 460, -1196, 459, -1197, 1271, -398, 461, -7915, 1271, -402, 1267, -399, 460, -1196, 1272, -398, 1271, -399, 461, -1195, 485, -1171, 460, -1196, 461, -1195, 462, -1195, 1273, -396, 461, -7914, 1298, -373, 1270, -398, 487, -1170, 1271, -398, 1271, -398, 462, -1195, 485, -1171, 486, -1170, 462, -1194, 485, -1172, 1296, -373, 486, -7891, 1297, -373, 1297, -372, 488, -1169, 1272, -398, 1272, -398, 486, -1170, 461, -1195, 462, -1194, 487, -1170, 461, -1195, 1271, -397, 462, -7914, 1271, -399, 1271, -398, 461, -1195, 1271, -399, 1271, -398, 461, -1195, 460, -1196, 460, -1196, 462, -1195, 461, -1195, 1271, -398, 461]
    on_press:
      then:
        fan.turn_on:
          id: bedroom_tower_fan
          speed: !lambda |-
            if (id(bedroom_tower_fan).speed == 1) {
              return 3;
            } else if (id(bedroom_tower_fan).speed == 2) {
              return 1;
            } else {
              return 2;
            }
  - platform: remote_receiver
    id: power_button
    name: "Power Button"
    internal: true
    raw:
      code: [1294, -396, 1278, -391, 466, -1191, 1275, -395, 1303, -366, 493, -1163, 468, -1188, 467, -1189, 466, -1191, 465, -1190, 466, -1190, 1276, -7098, 1294, -393, 1277, -397, 462, -1190, 1277, -393, 1276, -376, 482, -1191, 465, -1191, 467, -1189, 466, -1191, 470, -1185, 466, -1192, 1276, -7111, 1303, -367, 1277, -393, 467, -1189, 1277, -397, 1274, -391, 466, -1190, 469, -1187, 468, -1189, 467, -1189, 466, -1190, 466, -1191, 1275, -7115, 1276, -394, 1276, -393, 467, -1189, 1275, -395, 1276, -394, 467, -1188, 469, -1187, 466, -1189, 468, -1189, 466, -1189, 467, -1193, 1273]
    on_press:
      then:
        fan.toggle: bedroom_tower_fan
  - platform: remote_receiver
    id: oscillation_button
    name: "Oscillation Button"
    internal: true
    raw:
      code: [1184, -512, 1156, -513, 373, -1282, 1158, -512, 1157, -512, 348, -1333, 322, -1284, 1183, -510, 375, -1281, 351, -1280, 374, -1279, 402, -7999, 1185, -538, 1106, -539, 316, -1311, 1182, -513, 1131, -537, 323, -1304, 377, -1282, 1183, -460, 398, -1257, 374, -1332, 348, -1281, 347, -8025, 1159, -536, 1132, -535, 325, -1306, 1158, -539, 1158, -485, 374, -1282, 347, -1306, 1160, -538, 321, -1308, 347, -1333, 349, -1306, 324, -8051, 1156, -484, 1185, -483, 352, -1307, 1183, -537, 1098, -518, 349, -1306, 373, -1311, 1130, -536, 322, -1413, 243, -1360, 296, -1359, 301, -8045, 1159, -590, 1054, -536, 347, -1310, 1130, -538, 1132, -537, 324, -1334, 321, -1331, 1134, -509, 351, -1332, 348, -1311, 321, -1331, 321]
    on_press:
      then:
        fan.turn_on: 
          id: bedroom_tower_fan
          oscillating: true

remote_transmitter:
  pin: 
    number: D6
    inverted: false
  carrier_duty_percent: 50%

output:
  - platform: template
    type: float
    id: fan_output
    write_action:
      - if:
          condition:
            # If power state has changed...
            lambda: return (id(actual_power) != id(bedroom_tower_fan).state);
          then:
            # ...Send a power toggle
            - remote_transmitter.transmit_raw:
                carrier_frequency: 38kHz
                code: [1294, -396, 1278, -391, 466, -1191, 1275, -395, 1303, -366, 493, -1163, 468, -1188, 467, -1189, 466, -1191, 465, -1190, 466, -1190, 1276, -7098, 1294, -393, 1277, -397, 462, -1190, 1277, -393, 1276, -376, 482, -1191, 465, -1191, 467, -1189, 466, -1191, 470, -1185, 466, -1192, 1276, -7111, 1303, -367, 1277, -393, 467, -1189, 1277, -397, 1274, -391, 466, -1190, 469, -1187, 468, -1189, 467, -1189, 466, -1190, 466, -1191, 1275, -7115, 1276, -394, 1276, -393, 467, -1189, 1275, -395, 1276, -394, 467, -1188, 469, -1187, 466, -1189, 468, -1189, 466, -1189, 467, -1193, 1273]

            # If there's also a speed change, don't send it too quickly
            - delay: 2s
      - if:
          condition:
            # If speed state has changed by at least one...
            lambda: return (id(actual_speed) != id(bedroom_tower_fan).speed);
          then:
            # ...Send a fan speed change
            - remote_transmitter.transmit_raw:
                carrier_frequency: 38kHz
                code: [1297, -374, 1271, -399, 485, -1171, 1270, -400, 1270, -399, 459, -1197, 459, -1197, 459, -1197, 458, -1198, 459, -1198, 1268, -401, 458, -7918, 1244, -426, 1243, -426, 433, -1224, 1268, -402, 1268, -401, 460, -1196, 458, -1198, 458, -1198, 459, -1197, 459, -1198, 1269, -399, 459, -7918, 1269, -400, 1270, -399, 461, -1196, 1270, -399, 1271, -398, 459, -1198, 459, -1196, 460, -1197, 460, -1196, 459, -1197, 1271, -398, 461, -7915, 1271, -402, 1267, -399, 460, -1196, 1272, -398, 1271, -399, 461, -1195, 485, -1171, 460, -1196, 461, -1195, 462, -1195, 1273, -396, 461, -7914, 1298, -373, 1270, -398, 487, -1170, 1271, -398, 1271, -398, 462, -1195, 485, -1171, 486, -1170, 462, -1194, 485, -1172, 1296, -373, 486, -7891, 1297, -373, 1297, -372, 488, -1169, 1272, -398, 1272, -398, 486, -1170, 461, -1195, 462, -1194, 487, -1170, 461, -1195, 1271, -397, 462, -7914, 1271, -399, 1271, -398, 461, -1195, 1271, -399, 1271, -398, 461, -1195, 460, -1196, 460, -1196, 462, -1195, 461, -1195, 1271, -398, 461]
      - if:
          condition:
            # If speed state has changed by two...
            # lambda: return ((id(bedroom_tower_fan).speed - id(actual_speed) == 0.33) || (id(bedroom_tower_fan).speed - id(actual_speed) < -0.6) );
            lambda: |-
              if ( (id(actual_speed) == 1) && (id(bedroom_tower_fan).speed == 2) ) {
                return true;
              } else if ( (id(actual_speed) == 2) && (id(bedroom_tower_fan).speed == 3) ) {
                return true;
              } else if ( (id(actual_speed) == 3) && (id(bedroom_tower_fan).speed == 1) ) {
                return true;
              } else {
                return false;
              }
          then:
            # ...Send another fan speed change
            - delay: 2s
            - remote_transmitter.transmit_raw:
                carrier_frequency: 38kHz
                code: [1297, -374, 1271, -399, 485, -1171, 1270, -400, 1270, -399, 459, -1197, 459, -1197, 459, -1197, 458, -1198, 459, -1198, 1268, -401, 458, -7918, 1244, -426, 1243, -426, 433, -1224, 1268, -402, 1268, -401, 460, -1196, 458, -1198, 458, -1198, 459, -1197, 459, -1198, 1269, -399, 459, -7918, 1269, -400, 1270, -399, 461, -1196, 1270, -399, 1271, -398, 459, -1198, 459, -1196, 460, -1197, 460, -1196, 459, -1197, 1271, -398, 461, -7915, 1271, -402, 1267, -399, 460, -1196, 1272, -398, 1271, -399, 461, -1195, 485, -1171, 460, -1196, 461, -1195, 462, -1195, 1273, -396, 461, -7914, 1298, -373, 1270, -398, 487, -1170, 1271, -398, 1271, -398, 462, -1195, 485, -1171, 486, -1170, 462, -1194, 485, -1172, 1296, -373, 486, -7891, 1297, -373, 1297, -372, 488, -1169, 1272, -398, 1272, -398, 486, -1170, 461, -1195, 462, -1194, 487, -1170, 461, -1195, 1271, -397, 462, -7914, 1271, -399, 1271, -398, 461, -1195, 1271, -399, 1271, -398, 461, -1195, 460, -1196, 460, -1196, 462, -1195, 461, -1195, 1271, -398, 461]
      - lambda: id(actual_power) = id(bedroom_tower_fan).state;
      - lambda: id(actual_speed) = id(bedroom_tower_fan).speed;
  - platform: template
    type: binary 
    id: fan_osc
    write_action:
      - if:
          condition:
            # If oscillation state has changed
            lambda: return (id(actual_oscillation) != id(bedroom_tower_fan).oscillating);
          then:
            # ...Send an oscillation toggle
            - remote_transmitter.transmit_raw:
                carrier_frequency: 38kHz
                code: [1184, -512, 1156, -513, 373, -1282, 1158, -512, 1157, -512, 348, -1333, 322, -1284, 1183, -510, 375, -1281, 351, -1280, 374, -1279, 402, -7999, 1185, -538, 1106, -539, 316, -1311, 1182, -513, 1131, -537, 323, -1304, 377, -1282, 1183, -460, 398, -1257, 374, -1332, 348, -1281, 347, -8025, 1159, -536, 1132, -535, 325, -1306, 1158, -539, 1158, -485, 374, -1282, 347, -1306, 1160, -538, 321, -1308, 347, -1333, 349, -1306, 324, -8051, 1156, -484, 1185, -483, 352, -1307, 1183, -537, 1098, -518, 349, -1306, 373, -1311, 1130, -536, 322, -1413, 243, -1360, 296, -1359, 301, -8045, 1159, -590, 1054, -536, 347, -1310, 1130, -538, 1132, -537, 324, -1334, 321, -1331, 1134, -509, 351, -1332, 348, -1311, 321, -1331, 321]
      - lambda: id(actual_oscillation) = id(bedroom_tower_fan).oscillating; 

fan:
  - platform: speed
    id: bedroom_tower_fan
    name: Bedroom Tower Fan 
    speed_count: 3
    output: fan_output
    oscillation_output: fan_osc
